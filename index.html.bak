<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Funko Image & Details Extractor + Affiliate Links</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f7fafc; /* Tailwind gray-100 */
            color: #1f2937; /* Tailwind gray-800 */
            transition: background-color 0.3s ease-in-out, color 0.3s ease-in-out;
        }
        .loader, .image-loader-spinner {
            border: 4px solid #e5e7eb; /* Tailwind gray-200 */
            border-top: 4px solid #3b82f6; /* Tailwind blue-500 */
            border-radius: 50%;
            width: 24px;
            height: 24px;
            animation: spin 1s linear infinite;
        }
        .image-loader-spinner { width: 32px; height: 32px; }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .image-item {
            transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        }
        .image-item:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }
        .image-container {
            background-color: #f9fafb; /* Tailwind gray-50 */
            aspect-ratio: 1 / 1;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 0.375rem;
            overflow: hidden;
        }
        .image-container img {
            max-height: 100%;
            max-width: 100%;
            object-fit: contain;
            transition: opacity 0.3s ease-in-out;
        }
        .status-message { margin-top: 1rem; padding: 1rem; border-radius: 0.5rem; font-size: 0.95rem; }
        .status-success { background-color: #ecfdf5; color: #065f46; border: 1px solid #a7f3d0; }
        .status-error   { background-color: #fff1f2; color: #9f1239; border: 1px solid #fecdd3; }
        .status-info    { background-color: #eff6ff; color: #1e40af; border: 1px solid #bfdbfe; }
        .status-warning { background-color: #fffbeb; color: #92400e; border: 1px solid #fde68a; }

        .pid-result-block, .affiliate-converter-section {
            opacity: 0;
            transform: translateY(10px);
            animation: fadeInSlideUp 0.5s ease-out forwards;
        }
        @keyframes fadeInSlideUp {
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .details-container {
            margin-top: 1rem;
            padding: 0.75rem;
            background-color: #f9fafb; 
            border: 1px solid #e5e7eb; 
            border-radius: 0.375rem; 
            font-size: 0.9em;
            line-height: 1.6;
        }
        .details-container h4 { font-weight: 600; color: #4b5563; margin-bottom: 0.25rem; }
        .details-container p, .details-container div { margin-bottom: 0.5rem; color: #374151; }
        .details-container .description-text { max-height: 150px; overflow-y: auto; padding-right: 5px; }
        .details-toggle-button { background-color: #e5e7eb; color: #374151; transition: background-color 0.2s ease; }
        .details-toggle-button:hover { background-color: #d1d5db; }
        .details-toggle-button svg { transition: transform 0.3s ease; }
        .details-toggle-button.open svg { transform: rotate(180deg); }

        .section-header-icon {
            width: 2rem; /* Tailwind w-8 */
            height: 2rem; /* Tailwind h-8 */
            margin-right: 0.75rem; /* Tailwind mr-3 */
            color: #4b5563; /* Tailwind gray-600 */
        }

        /* Dark Mode Styles */
        body.dark-mode {
            background-color: #111827; /* Tailwind gray-900 */
            color: #d1d5db; /* Tailwind gray-300 */
        }
        .dark-mode .main-content-card {
            background-color: #1f2937; /* Tailwind gray-800 */
            box-shadow: 0 10px 15px -3px rgba(0,0,0,0.5), 0 4px 6px -2px rgba(0,0,0,0.4);
        }
        .dark-mode #mainHeader, .dark-mode #subHeader, .dark-mode .section-header { color: #f3f4f6; /* Tailwind gray-100 */ }
        .dark-mode #mainHeaderIcon, .dark-mode .section-header-icon { color: #93c5fd; /* Lighter blue for icons in dark mode */ }
        .dark-mode label { color: #d1d5db; /* Tailwind gray-300 */ }
        .dark-mode textarea, .dark-mode input[type="text"], .dark-mode input[type="url"] {
            background-color: #374151; /* Tailwind gray-700 */
            border-color: #4b5563; /* Tailwind gray-600 */
            color: #f3f4f6;
        }
        .dark-mode textarea::placeholder, .dark-mode input::placeholder { color: #9ca3af; /* Tailwind gray-400 */ }
        .dark-mode .status-success { background-color: #064e3b; color: #a7f3d0; border-color: #059669; }
        .dark-mode .status-error   { background-color: #7f1d1d; color: #fecdd3; border-color: #ef4444; }
        .dark-mode .status-info    { background-color: #1e3a8a; color: #bfdbfe; border-color: #60a5fa; }
        .dark-mode .status-warning { background-color: #713f12; color: #fde68a; border-color: #f59e0b; }
        .dark-mode .pid-result-block { background-color: #374151; border-color: #4b5563; }
        .dark-mode .pid-result-block h3 { color: #f3f4f6; }
        .dark-mode .pid-status-message p { color: #d1d5db; } 
        .dark-mode .pid-status-message .text-red-600 { color: #fca5a5; } 
        .dark-mode .pid-status-message .text-green-600 { color: #6ee7b7; } 
        .dark-mode .pid-status-message .text-blue-600 { color: #93c5fd; } 
        .dark-mode .pid-status-message .text-yellow-600 { color: #fde047; } 
        .dark-mode .image-item { background-color: #4b5563; border-color: #6b7280; }
        .dark-mode .image-container { background-color: #374151; }
        .dark-mode .image-item a.text-blue-600 { color: #93c5fd; } 
        .dark-mode .image-item a.text-blue-600:hover { color: #60a5fa; }
        .dark-mode .details-container { background-color: #374151; border-color: #4b5563; }
        .dark-mode .details-container h4 { color: #e5e7eb; }
        .dark-mode .details-container p, .dark-mode .details-container div { color: #d1d5db; }
        .dark-mode .details-toggle-button { background-color: #4b5563; color: #f3f4f6; }
        .dark-mode .details-toggle-button:hover { background-color: #6b7280; }
        .dark-mode #emptyStateResults { border-color: #4b5563; }
        .dark-mode #emptyStateResults svg { color: #6b7280; }
        .dark-mode #emptyStateResults h3 { color: #9ca3af; }
        .dark-mode #emptyStateResults p { color: #6b7280; }
        .dark-mode footer p { color: #9ca3af; }
        .dark-mode code { background-color: #4b5563; color: #93c5fd; }
        
        .dark-mode .affiliate-button.bg-green-500 { background-color: #059669; } /* Darker green */
        .dark-mode .affiliate-button.bg-green-500:hover { background-color: #047857; }
        .dark-mode .affiliate-button.bg-indigo-500 { background-color: #4f46e5; } /* Darker indigo */
        .dark-mode .affiliate-button.bg-indigo-500:hover { background-color: #4338ca; }
        .dark-mode .affiliate-button.bg-red-500 { background-color: #dc2626; } /* Darker red */
        .dark-mode .affiliate-button.bg-red-500:hover { background-color: #b91c1c; }
        .dark-mode .affiliate-button { color: #e5e7eb; } /* Ensure text color is light */

    </style>
</head>
<body class="text-gray-800 antialiased">
    <div class="container mx-auto max-w-3xl px-4 py-8 md:py-12">
        <div id="mainCard" class="main-content-card bg-white p-6 md:p-8 rounded-xl shadow-2xl transition-shadow duration-300">
            
            <section class="affiliate-converter-section mb-10 pb-8 border-b border-gray-200 dark:border-gray-700">
                <div class="flex items-center mb-6">
                    <svg class="section-header-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path></svg>
                    <h2 class="text-3xl font-bold text-gray-700 section-header">Affiliate Link Converter</h2>
                </div>
                <div class="space-y-3">
                    <div>
                        <label for="affiliateInput" class="block text-sm font-medium text-gray-700 mb-1">Original URL:</label>
                        <input type="text" id="affiliateInput" class="w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="Paste URL here..." />
                    </div>
                    <div>
                        <label for="affiliateOutput" class="block text-sm font-medium text-gray-700 mb-1">Affiliate URL:</label>
                        <input type="text" id="affiliateOutput" readonly class="w-full p-3 border border-gray-300 rounded-lg bg-gray-50 dark:bg-gray-600 shadow-sm" placeholder="Converted link will appear here..." />
                    </div>
                    <div class="grid grid-cols-2 sm:grid-cols-3 gap-3 pt-2">
                        <button onclick="splitStringAffiliate()" class="affiliate-button bg-green-500 hover:bg-green-600 text-white font-semibold py-2 px-4 rounded-full shadow-md hover:shadow-lg transition duration-150 transform hover:scale-105">Convert (Split)</button>
                        <button onclick="noSplitAffiliate()" class="affiliate-button bg-indigo-500 hover:bg-indigo-600 text-white font-semibold py-2 px-4 rounded-full shadow-md hover:shadow-lg transition duration-150 transform hover:scale-105">Convert (No Split)</button>
                        <button onclick="clearElementsAffiliate()" class="affiliate-button bg-red-500 hover:bg-red-600 text-white font-semibold py-2 px-4 rounded-full shadow-md hover:shadow-lg transition duration-150 transform hover:scale-105 sm:col-start-2 md:col-start-auto">Clear</button>
                    </div>
                </div>
            </section>

            <header class="mb-8 text-center">
                <svg id="mainHeaderIcon" class="w-16 h-16 text-blue-600 mx-auto mb-3 transition-colors duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path></svg>
                <h1 id="mainHeader" class="text-4xl font-bold text-gray-800 transition-colors duration-300">Funko Image & Details Extractor</h1>
                <p id="subHeader" class="text-gray-600 mt-2 text-lg transition-colors duration-300">
                    Enter Funko Product IDs (PIDs) to fetch content via
                    <code class="bg-blue-100 text-blue-700 px-1 py-0.5 rounded text-sm">corsproxy.io</code>
                    and extract product images & details.
                </p>
            </header>

            <div class="mb-6">
                <label for="funkoPidTextarea" class="block text-sm font-semibold text-gray-700 mb-2">Funko Product IDs (PIDs):</label>
                <textarea id="funkoPidTextarea" class="w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-shadow" rows="3" placeholder="Enter PIDs, separated by commas, spaces, or new lines (e.g., 84946, 72406)"></textarea>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                <button id="fetchButton" class="md:col-span-3 bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-full shadow-md hover:shadow-lg transform hover:scale-105 transition duration-300 ease-in-out text-lg flex items-center justify-center">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg>
                    Fetch and Extract
                </button>
            </div>
            <div class="flex justify-between items-center">
                <button id="clearResultsButton" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-full shadow-md hover:shadow-lg transform hover:scale-105 transition duration-300 ease-in-out text-sm flex items-center justify-center">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg>
                    Clear Funko Results
                </button>
                <button id="darkModeToggle" title="Switch to Dark Mode" class="bg-gray-200 hover:bg-gray-300 dark:bg-gray-600 dark:hover:bg-gray-500 text-gray-700 dark:text-gray-200 font-bold p-2 rounded-full shadow-md hover:shadow-lg transform hover:scale-110 transition duration-300 ease-in-out text-sm flex items-center justify-center">
                    <svg id="darkModeIcon" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path> </svg>
                </button>
            </div>


            <div id="statusArea" class="mt-6 min-h-[60px]">
                </div>

            <div id="resultsArea" class="mt-6 space-y-6">
                </div>
        </div>

        <footer class="text-center text-gray-500 mt-10 text-sm">
            <p>Using corsproxy.io for data fetching. API Key is hardcoded.</p>
        </footer>
    </div>

    <script>
        // Affiliate Link Converter Functions
        function copyToClipboardAffiliate(str) {
            const el = document.createElement("textarea");
            el.value = str;
            document.body.appendChild(el);
            el.select();

            if (navigator.clipboard) {
                navigator.clipboard.writeText(str)
                    .then(() => {
                        console.log('Affiliate link copied to clipboard');
                        const outputField = document.getElementById("affiliateOutput");
                        const originalPlaceholder = outputField.placeholder;
                        outputField.value = str; // Ensure value is set before changing placeholder
                        outputField.placeholder = "Copied!";
                        setTimeout(() => { outputField.placeholder = originalPlaceholder; }, 1500);
                    })
                    .catch(err => {
                        console.error('Error copying affiliate link: ', err);
                        try { 
                           document.execCommand("copy");
                           console.log('Affiliate link copied using execCommand');
                        } catch (e) {
                           console.error('Fallback execCommand copy failed: ', e);
                        }
                    });
            } else { 
                try {
                   document.execCommand("copy");
                   console.log('Affiliate link copied using execCommand');
                } catch (e) {
                   console.error('Fallback execCommand copy failed: ', e);
                }
            }
            document.body.removeChild(el);
        }

        function splitStringAffiliate() {
            const input = document.getElementById("affiliateInput").value;
            const stores = {
                "hottopic.com": "https://www.tkqlhce.com/click-8310556-12641438?url=",
                "boxlunch.com": "https://www.tkqlhce.com/click-8310556-12695057?url=",
                "disneystore.com": "https://www.anrdoezrs.net/click-8310556-11554175?url=",
                "walgreens.com": "https://www.anrdoezrs.net/click-8310556-11553095?url=",
                "booksamillion.com": "https://www.anrdoezrs.net/click-8310556-11552245?url=",
                "funko.com": "https://www.dpbolvw.net/click-8310556-15251747?url=",
                "barnesandnoble.com": "https://www.kqzyfj.com/click-8310556-12366831?url=",
                "2ndandcharles.com": "https://www.jdoqocy.com/click-8310556-15494442?url=",
                "fye.com": "https://www.kqzyfj.com/click-8310556-15558078?url=",
                "amazon.com": "?linkCode=ll2&tag=fupone-20&linkId=b368190afcd29e05f4e85f63a9579031&language=en_US&ref_=as_li_ss_tl",
                "gamestop.com": "https://click.linksynergy.com/deeplink?id=IdYcgGrVl44&mid=24348&murl=",
                "lego.com": "https://click.linksynergy.com/deeplink?id=IdYcgGrVl44&mid=13923&murl=",
                "wwe.com": "https://wwe-shop.sjv.io/c/899674/1371040/16449?u=",
                "walmart.com": "https://goto.walmart.com/c/899674/565706/9383?veh=aff&sourceid=imp_000011112222333344&u=",
                "target.com": "https://goto.target.com/c/373031/81938/2092?u=",
                "bestbuy.com": "https://bestbuy.7tiv.net/c/373031/614286/10014?u="
            };

            let part1 = "Nope - URL not recognized or no '?' found for splitting.";
            if (input.includes("?")) {
                const [urlOnly, queryString] = input.split("?"); 
                for (const storeUrl of Object.keys(stores)) {
                    if (urlOnly.includes(storeUrl)) {
                        if (storeUrl === "amazon.com") {
                            part1 = urlOnly + stores[storeUrl]; 
                        } else {
                            part1 = stores[storeUrl] + encodeURIComponent(urlOnly); // Encode the original URL part
                        }
                        break;
                    }
                }
            } else {
                 part1 = "URL does not contain '?' for splitting. Try 'No Split' button.";
            }

            document.getElementById("affiliateOutput").value = part1;
            if (part1 !== "Nope - URL not recognized or no '?' found for splitting." && part1 !== "URL does not contain '?' for splitting. Try 'No Split' button.") {
                 copyToClipboardAffiliate(part1);
            }
        }

        function noSplitAffiliate() {
            const input = document.getElementById("affiliateInput").value;
            const affiliateLinks = {
                "hottopic.com": "https://www.tkqlhce.com/click-8310556-12641438?url=",
                "boxlunch.com": "https://www.tkqlhce.com/click-8310556-12695057?url=",
                "disneystore.com": "https://www.anrdoezrs.net/click-8310556-11554175?url=",
                "walgreens.com": "https://www.anrdoezrs.net/click-8310556-11553095?url=",
                "booksamillion.com": "https://www.anrdoezrs.net/click-8310556-11552245?url=",
                "funko.com": "https://www.dpbolvw.net/click-8310556-15251747?url=",
                "barnesandnoble.com": "https://www.kqzyfj.com/click-8310556-12366831?url=",
                "2ndandcharles.com": "https://www.jdoqocy.com/click-8310556-15494442?url=",
                "fye.com": "https://www.kqzyfj.com/click-8310556-15558078?url=",
                "amazon.com": "&linkCode=ll2&tag=fupone-20&linkId=b368190afcd29e05f4e85f63a9579031&language=en_US&ref_=as_li_ss_tl",
                "gamestop.com": "https://click.linksynergy.com/deeplink?id=IdYcgGrVl44&mid=24348&murl=",
                "lego.com": "https://click.linksynergy.com/deeplink?id=IdYcgGrVl44&mid=13923&murl=",
                "wwe.com": "https://wwe-shop.sjv.io/c/899674/1371040/16449?u=",
                "walmart.com": "https://goto.walmart.com/c/899674/565706/9383?veh=aff&sourceid=imp_000011112222333344&u=",
                "target.com": "https://goto.target.com/c/373031/81938/2092?u=",
                "bestbuy.com": "https://bestbuy.7tiv.net/c/373031/614286/10014?u="
            };

            const domain = Object.keys(affiliateLinks).find((domain) =>
                input.includes(domain)
            );

            let part1;
            if (domain) {
                part1 =
                    domain === "amazon.com"
                        ? input + affiliateLinks[domain]
                        : affiliateLinks[domain] + encodeURIComponent(input); // Encode the full input URL
            } else {
                part1 = "No matching store found for 'No Split'.";
            }

            document.getElementById("affiliateOutput").value = part1;
            if (part1 !== "No matching store found for 'No Split'.") {
                copyToClipboardAffiliate(part1);
            }
        }

        function clearElementsAffiliate() {
            const input = document.getElementById("affiliateInput");
            const output = document.getElementById("affiliateOutput");
            input.value = "";
            output.value = "";
        }


        // Funko Extractor Variables and Functions
        const funkoPidTextarea = document.getElementById('funkoPidTextarea');
        const fetchButton = document.getElementById('fetchButton');
        const clearResultsButton = document.getElementById('clearResultsButton');
        const darkModeToggle = document.getElementById('darkModeToggle');
        const darkModeIcon = document.getElementById('darkModeIcon');
        const statusArea = document.getElementById('statusArea');
        const resultsArea = document.getElementById('resultsArea');
        
        const sunIconPath = "M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm0 15a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zm8.364-8.364a1 1 0 00-1.414-1.414l-.707.707a1 1 0 001.414 1.414l.707-.707zm-12.728 0a1 1 0 00-1.414-1.414l-.707.707a1 1 0 101.414 1.414l.707-.707zM17 10a1 1 0 011-1h1a1 1 0 110 2h-1a1 1 0 01-1-1zm-15 0a1 1 0 011-1h1a1 1 0 110 2H3a1 1 0 01-1-1zm7.071-7.071a1 1 0 00-1.414 1.414l.707.707a1 1 0 001.414-1.414l-.707-.707zm0 12.728a1 1 0 00-1.414 1.414l.707.707a1 1 0 001.414-1.414l-.707-.707zM10 7a3 3 0 100 6 3 3 0 000-6z";
        const moonIconPath = "M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z";

        const FUNKO_TARGET_URL_BASE = 'https://funko.com/on/demandware.store/Sites-FunkoUS-Site/en_US/Wishlist-GetProduct?pid=';
        const FUNKO_IMAGE_BASE_URL = 'https://funko.com/dw/image/v2/BGTS_PRD/';
        const CORS_PROXY_API_KEY = 'eb06c81a'; 
        const CORS_PROXY_BASE_URL = 'https://corsproxy.io/';

        const emptyStateHTML = `
            <div id="emptyStateResults" class="text-center p-10 border-2 border-dashed border-gray-300 rounded-lg opacity-0 transition-opacity duration-500 ease-out">
                <svg class="mx-auto h-16 w-16 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                    <path vector-effect="non-scaling-stroke" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
                <h3 class="mt-4 text-lg font-medium text-gray-700">Ready to find some images & details?</h3>
                <p class="mt-1 text-sm text-gray-500">Enter Funko PIDs above and click "Fetch" to begin.</p>
            </div>`;

        function setInitialEmptyState() {
            resultsArea.innerHTML = emptyStateHTML;
            setTimeout(() => {
                const emptyStateDiv = document.getElementById('emptyStateResults');
                if (emptyStateDiv) emptyStateDiv.style.opacity = '1';
            }, 50);
        }
        setInitialEmptyState(); 

        clearResultsButton.addEventListener('click', () => { 
            setInitialEmptyState();
            statusArea.innerHTML = '';
            funkoPidTextarea.value = '';
            displayStatus('Funko results cleared. Ready for new PIDs.', 'info');
        });

        darkModeToggle.addEventListener('click', () => {
            document.body.classList.toggle('dark-mode');
            const isDarkMode = document.body.classList.contains('dark-mode');
            if (isDarkMode) {
                darkModeIcon.innerHTML = `<path fill-rule="evenodd" d="${sunIconPath}" clip-rule="evenodd"></path>`;
                darkModeToggle.title = "Switch to Light Mode";
            } else {
                darkModeIcon.innerHTML = `<path d="${moonIconPath}"></path>`;
                darkModeToggle.title = "Switch to Dark Mode";
            }
        });


        function handleToggleDetailsClick(event) {
            const button = event.target.closest('button');
            const detailsContentId = button.getAttribute('aria-controls');
            const detailsContent = document.getElementById(detailsContentId);
            const isExpanded = detailsContent.style.display === 'block';

            detailsContent.style.display = isExpanded ? 'none' : 'block';
            button.setAttribute('aria-expanded', !isExpanded);
            button.classList.toggle('open', !isExpanded);
        }


        fetchButton.addEventListener('click', async () => {
            const pidsString = funkoPidTextarea.value.trim();
            const pids = pidsString.split(/[\s,]+/).map(pid => pid.trim()).filter(pid => pid !== '');

            if (pids.length === 0) {
                displayStatus('Please enter at least one Funko Product ID (PID).', 'error');
                if (!resultsArea.innerHTML.includes('pid-result-block')) { 
                    setInitialEmptyState();
                }
                return;
            }

            fetchButton.disabled = true;
            fetchButton.innerHTML = `Processing PIDs... <div class="loader"></div>`;
            resultsArea.innerHTML = ''; 
            let overallSuccessCount = 0;

            for (let i = 0; i < pids.length; i++) {
                const pid = pids[i];
                const currentPidStatusMessage = `Processing PID ${i + 1} of ${pids.length}: <strong>${pid}</strong>`;
                displayStatus(currentPidStatusMessage, 'info');

                const targetUrl = `${FUNKO_TARGET_URL_BASE}${pid}`;
                const proxyFetchUrl = `${CORS_PROXY_BASE_URL}?key=${CORS_PROXY_API_KEY}&url=${encodeURIComponent(targetUrl)}`;

                const sanitizedPid = pid.replace(/[^a-zA-Z0-9]/g, "");
                const pidResultContainerId = `pid-result-${sanitizedPid}-${i}`;
                const detailsToggleContainerId = `details-toggle-container-${sanitizedPid}-${i}`;
                const detailsContentId = `details-content-${sanitizedPid}-${i}`;


                const pidResultBlock = document.createElement('div');
                pidResultBlock.id = pidResultContainerId;
                pidResultBlock.className = 'pid-result-block mb-6 p-4 border border-gray-200 rounded-lg shadow';
                pidResultBlock.innerHTML = `
                    <h3 class="text-xl font-semibold text-gray-800 mb-2">Results for PID: ${pid}</h3>
                    <div class="pid-status-message text-sm mb-2"></div>
                    <div class="pid-image-gallery"></div>
                    <div id="${detailsToggleContainerId}" class="mt-3"></div>
                    <div id="${detailsContentId}" class="details-container mt-2" style="display: none;"></div>`;
                resultsArea.appendChild(pidResultBlock);
                
                setTimeout(() => pidResultBlock.style.opacity = '1', 50);

                const pidStatusDiv = pidResultBlock.querySelector(`.pid-status-message`);
                const pidImageGalleryDiv = pidResultBlock.querySelector(`.pid-image-gallery`);
                const detailsToggleContainer = pidResultBlock.querySelector(`#${detailsToggleContainerId}`);
                const detailsContentDiv = pidResultBlock.querySelector(`#${detailsContentId}`);


                pidStatusDiv.innerHTML = `<p class="text-blue-600">Fetching data via proxy...</p>`;

                try {
                    const response = await fetch(proxyFetchUrl);
                    if (!response.ok) {
                        let errorText = await response.text();
                        if (errorText.length > 150) errorText = errorText.substring(0, 150) + "...";
                        pidStatusDiv.innerHTML = `<p class="text-red-600 font-medium">Error fetching: ${response.status} ${response.statusText}.</p><p class="text-xs text-gray-500 mt-1">Proxy response: ${errorText}</p>`;
                        continue; 
                    }
                    const responseText = await response.text();
                    if (responseText.trim() === "") {
                        pidStatusDiv.innerHTML = `<p class="text-yellow-600 font-medium">Fetched successfully, but the response was empty.</p>`;
                        continue;
                    }
                    
                    const extractionResult = extractDataFromText(responseText, pidStatusDiv); 
                    if (extractionResult.urls.size > 0) {
                        pidImageGalleryDiv.innerHTML = generateImagesHTMLForPid(extractionResult.urls);
                        overallSuccessCount++; 
                    } else {
                    }

                    if (extractionResult.productName || extractionResult.longDescription || extractionResult.formattedPrice) {
                        let detailsHTML = '';
                        if (extractionResult.productName) {
                            detailsHTML += `<h4>Product Name:</h4><p>${extractionResult.productName}</p>`;
                        }
                        if (extractionResult.longDescription) {
                            const sanitizedDescription = extractionResult.longDescription.replace(/<[^>]*>?/gm, '');
                            detailsHTML += `<h4>Description:</h4><div class="description-text">${sanitizedDescription || 'N/A'}</div>`;
                        }
                        if (extractionResult.formattedPrice) {
                            detailsHTML += `<h4>Price:</h4><p>${extractionResult.formattedPrice}</p>`;
                        }
                        detailsContentDiv.innerHTML = detailsHTML;
                        detailsToggleContainer.innerHTML = `
                            <button aria-expanded="false" aria-controls="${detailsContentId}" class="details-toggle-button w-full text-left py-2 px-3 rounded-md text-sm font-medium flex justify-between items-center">
                                Show Product Details
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path></svg>
                            </button>`;
                         if (!extractionResult.urls.size && (extractionResult.productName || extractionResult.longDescription || extractionResult.formattedPrice)) {
                            overallSuccessCount++; 
                        }
                    }


                } catch (error) {
                    pidStatusDiv.innerHTML = `<p class="text-red-600 font-medium">Network error or issue with proxy for PID ${pid}: ${error.message}</p>`;
                }
            }

            document.querySelectorAll('.details-toggle-button').forEach(button => {
                button.addEventListener('click', handleToggleDetailsClick);
            });


            fetchButton.disabled = false;
            fetchButton.innerHTML = `<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg> Fetch and Extract`;
            
            if (pids.length > 0) {
                if (overallSuccessCount > 0) {
                    displayStatus(`Batch processing complete. Successfully extracted images/details for ${overallSuccessCount} of ${pids.length} PIDs.`, 'success');
                } else {
                    displayStatus(`Batch processing complete. No images or details were successfully extracted for any of the ${pids.length} PIDs.`, 'warning');
                }
            } else if (pidsString !== "") {
                 displayStatus('No valid PIDs found to process.', 'error');
            }
            if (resultsArea.innerHTML.trim() === '') { 
                setInitialEmptyState();
            }
        });

        function displayStatus(message, type = 'info') {
            let typeClass = 'status-info';
            if (type === 'success') typeClass = 'status-success';
            if (type === 'error') typeClass = 'status-error';
            if (type === 'warning') typeClass = 'status-warning';
            statusArea.innerHTML = `<div class="status-message ${typeClass}">${message}</div>`;
        }

        function extractDataFromText(text, pidStatusDiv) {
            const foundUrls = new Set();
            let productName = null;
            let longDescription = null;
            let formattedPrice = null;
            const imageExtensions = /\.(png|jpg|jpeg)$/i;
            let extractionMethod = "Regex Fallback"; 

            try {
                const jsonData = JSON.parse(text);
                let jsonUrlsFound = 0;

                if (jsonData.product) {
                    if (typeof jsonData.product.productName === 'string') productName = jsonData.product.productName;
                    else if (typeof jsonData.product.name === 'string') productName = jsonData.product.name;
                    
                    if (typeof jsonData.product.longDescription === 'string') longDescription = jsonData.product.longDescription;
                    
                    if (jsonData.product.price && jsonData.product.price.sales && typeof jsonData.product.price.sales.formatted === 'string') {
                        formattedPrice = jsonData.product.price.sales.formatted;
                    }
                } else { 
                    if (typeof jsonData.productName === 'string') productName = jsonData.productName;
                    else if (typeof jsonData.name === 'string') productName = jsonData.name;
                    if (typeof jsonData.longDescription === 'string') longDescription = jsonData.longDescription;
                    if (jsonData.price && jsonData.price.sales && typeof jsonData.price.sales.formatted === 'string') {
                         formattedPrice = jsonData.price.sales.formatted;
                    }
                }

                function findUrlsRecursively(obj) {
                    if (!obj || typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean') return;

                    if (Array.isArray(obj)) {
                        obj.forEach(item => findUrlsRecursively(item));
                    } else if (typeof obj === 'object') {
                        let processedKnownPath = false;
                        if (obj.images && typeof obj.images === 'object') {
                            const imageSources = [];
                            if (obj.images['hi-res'] && Array.isArray(obj.images['hi-res'])) imageSources.push(...obj.images['hi-res']);
                            if (obj.images.views && Array.isArray(obj.images.views)) imageSources.push(...obj.images.views);
                            ['default', 'large', 'small', 'absomedium', 'zoom', 'swatch'].forEach(key => {
                                if(obj.images[key] && Array.isArray(obj.images[key])) imageSources.push(...obj.images[key]);
                            });

                            if(imageSources.length > 0) {
                                imageSources.forEach(img => findUrlsRecursively(img));
                                processedKnownPath = true;
                            }
                        }
                        
                        if (typeof obj.url === 'string' && imageExtensions.test(obj.url)) {
                            let candidateUrlOrPath = obj.url;
                            let finalUrl;
                            if (candidateUrlOrPath.startsWith('http://') || candidateUrlOrPath.startsWith('https://') || candidateUrlOrPath.startsWith('//')) {
                                finalUrl = candidateUrlOrPath;
                            } else if (!candidateUrlOrPath.includes('://')) {
                                if (FUNKO_IMAGE_BASE_URL.endsWith('/') && candidateUrlOrPath.startsWith('/')) {
                                    finalUrl = FUNKO_IMAGE_BASE_URL + candidateUrlOrPath.substring(1);
                                } else if (!FUNKO_IMAGE_BASE_URL.endsWith('/') && !candidateUrlOrPath.startsWith('/')) {
                                    finalUrl = FUNKO_IMAGE_BASE_URL + '/' + candidateUrlOrPath;
                                } else {
                                    finalUrl = FUNKO_IMAGE_BASE_URL + candidateUrlOrPath;
                                }
                            }
                            if (finalUrl && !finalUrl.startsWith('data:')) {
                                foundUrls.add(finalUrl);
                                jsonUrlsFound++;
                            }
                             processedKnownPath = true;
                        }

                        if (!processedKnownPath) {
                             for (const key in obj) {
                                if (obj.hasOwnProperty(key)) {
                                    findUrlsRecursively(obj[key]);
                                }
                            }
                        }
                    }
                }
                findUrlsRecursively(jsonData);
                if (jsonUrlsFound > 0 || productName || longDescription || formattedPrice) { 
                    extractionMethod = "JSON Parsing";
                }
            } catch (e) {
                 if(pidStatusDiv) pidStatusDiv.innerHTML += `<p class="text-xs text-yellow-700 mt-1">Note: Response was not valid JSON, or JSON parsing for details/images failed. Falling back to regex scan for images. Error: ${e.message.substring(0,100)}</p>`;
            }

            if (foundUrls.size === 0) { 
                extractionMethod = extractionMethod.includes("JSON") ? "JSON (no images) + Regex" : "Regex Fallback (for images)";
                let match;
                const imagePatternRegex = /([a-zA-Z0-9\/_.-]+\.(?:png|jpg|jpeg))/gi;
                while ((match = imagePatternRegex.exec(text)) !== null) {
                    let candidateUrlOrPath = match[1];
                    if (candidateUrlOrPath.length < 4) continue;
                    let finalUrl;
                    if (candidateUrlOrPath.startsWith('http://') || candidateUrlOrPath.startsWith('https://') || candidateUrlOrPath.startsWith('//')) {
                        finalUrl = candidateUrlOrPath;
                    } else if (!candidateUrlOrPath.includes('://')) {
                         if (FUNKO_IMAGE_BASE_URL.endsWith('/') && candidateUrlOrPath.startsWith('/')) {
                            finalUrl = FUNKO_IMAGE_BASE_URL + candidateUrlOrPath.substring(1);
                        } else if (!FUNKO_IMAGE_BASE_URL.endsWith('/') && !candidateUrlOrPath.startsWith('/')) {
                            finalUrl = FUNKO_IMAGE_BASE_URL + '/' + candidateUrlOrPath;
                        } else {
                            finalUrl = FUNKO_IMAGE_BASE_URL + candidateUrlOrPath;
                        }
                    }
                    if (finalUrl && !finalUrl.startsWith('data:')) {
                        foundUrls.add(finalUrl);
                    }
                }
            }
            
            let statusText = `Data processed (using ${extractionMethod}). `;
            if (foundUrls.size > 0) statusText += `Extracted ${foundUrls.size} image(s). `;
            else statusText += `No JPG/PNG image URLs found. `;
            if (productName) statusText += `Product: <strong>${productName}</strong>. `;
            if (longDescription) statusText += `Desc available. `;
            if (formattedPrice) statusText += `Price: <strong>${formattedPrice}</strong>.`;

            if(pidStatusDiv) {
                pidStatusDiv.innerHTML = `<p class="${foundUrls.size > 0 || productName || longDescription || formattedPrice ? 'text-green-600' : 'text-yellow-600'} font-medium">${statusText}</p>`;
            }
            
            return { urls: foundUrls, productName, longDescription, formattedPrice };
        }

        function generateImagesHTMLForPid(urls) {
            if (!urls || urls.size === 0) {
                return ''; 
            }

            let html = `<div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3 mt-2">`;
            urls.forEach(url => {
                const filename = url.substring(url.lastIndexOf('/') + 1);
                const displayFilename = filename.length > 22 ? filename.substring(0, 19) + '...' : filename;
                html += `
                    <div class="image-item text-center p-2 border border-gray-200 rounded-lg shadow-sm bg-white flex flex-col justify-between">
                        <a href="${url}" target="_blank" title="Open image: ${filename}" class="block flex-grow image-container relative">
                            <div class="image-loader-spinner absolute inset-0 m-auto"></div>
                            <img src="${url}" alt="Funko Image" class="opacity-0" 
                                 onload="this.classList.remove('opacity-0'); this.previousElementSibling.style.display='none';"
                                 onerror="this.alt='Failed to load'; this.style.border='2px dashed #ef4444'; this.classList.remove('opacity-0'); this.previousElementSibling.style.display='none'; this.src='https://placehold.co/120x120/f87171/ffffff?text=Error';">
                        </a>
                        <a href="${url}" target="_blank" class="text-xs text-blue-600 hover:text-blue-800 hover:underline break-all block mt-2 pt-1 border-t border-gray-100" title="${filename}">
                            ${displayFilename}
                        </a>
                    </div>`;
            });
            html += '</div>';
            return html;
        }
    </script>
</body>
</html>
