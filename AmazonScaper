<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Multi-Region Amazon Scraper</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .found-item { animation: fadeIn 0.5s ease-out forwards; }
        .hidden { display: none; }
    </style>
</head>
<body class="bg-gray-900 text-gray-200 min-h-screen antialiased">

    <div class="container mx-auto p-4 md:p-8 max-w-7xl">
        <header class="text-center mb-8">
            <h1 class="text-4xl md:text-5xl font-bold text-white mb-2">Multi-Region Amazon Scraper</h1>
            <p class="text-lg text-gray-400">Extract all high-res images for an ASIN across multiple Amazon sites.</p>
        </header>

        <div class="bg-gray-800 rounded-lg shadow-lg p-6 mb-8">
            <div>
                <label for="asinInput" class="block text-sm font-medium text-gray-400 mb-1">Product List with ASINs</label>
                <textarea id="asinInput" class="w-full h-48 bg-gray-900 border border-gray-700 rounded-md py-2 px-4 text-gray-300 font-mono text-sm focus:ring-2 focus:ring-indigo-500" placeholder="Paste your product list here. The script will automatically find ASINs (e.g., B0DSWGHVZG)."></textarea>
            </div>

            <div class="mt-6 flex flex-col sm:flex-row justify-center items-center gap-4">
                <button id="startScanBtn" class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 px-6 rounded-lg transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-indigo-500/50 w-full sm:w-auto disabled:bg-gray-500 disabled:cursor-not-allowed">Start Scrape</button>
                <button id="stopScanBtn" class="bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-3 px-6 rounded-lg transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-yellow-500/50 w-full sm:w-auto hidden">Stop Scrape</button>
                <button id="clearResultsBtn" class="bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-red-500/50 w-full sm:w-auto">Clear Results</button>
            </div>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <div class="lg:col-span-1">
                <h2 class="text-2xl font-bold text-white mb-4 border-b border-gray-700 pb-2">Live Log</h2>
                <div id="logContainer" class="bg-gray-800 rounded-md p-4 h-96 overflow-y-auto font-mono text-xs leading-relaxed">
                    <div id="logPlaceholder" class="text-gray-500">Awaiting scrape...</div>
                </div>
            </div>
            <div class="lg:col-span-2">
                <h2 class="text-2xl font-bold text-white mb-4 border-b border-gray-700 pb-2">Found Images</h2>
                <div id="resultsContainer" class="bg-gray-800 rounded-md p-4 h-96 overflow-y-auto grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                    <div id="resultsPlaceholder" class="col-span-full text-gray-500 text-center py-16">Found images will appear here...</div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // --- DOM Elements ---
        const asinInput = document.getElementById('asinInput');
        const startScanBtn = document.getElementById('startScanBtn');
        const stopScanBtn = document.getElementById('stopScanBtn');
        const clearResultsBtn = document.getElementById('clearResultsBtn');
        const logContainer = document.getElementById('logContainer');
        const resultsContainer = document.getElementById('resultsContainer');
        let logPlaceholder = document.getElementById('logPlaceholder');
        let resultsPlaceholder = document.getElementById('resultsPlaceholder');

        let isScanRunning = false;
        const amazonRegions = ['com', 'ca', 'com.mx', 'co.uk', 'de', 'es', 'fr', 'it', 'nl', 'se', 'com.au', 'co.jp'];
        let foundImageFilenames = new Set(); // Used to track duplicates globally

        // --- UI Logic ---
        function setScanningUIState(isScanning) {
            isScanRunning = isScanning;
            startScanBtn.disabled = isScanning;
            clearResultsBtn.disabled = isScanning;
            asinInput.disabled = isScanning;
            startScanBtn.classList.toggle('hidden', isScanning);
            stopScanBtn.classList.toggle('hidden', !isScanning);
        }

        function logActivity(message, type = 'info') {
            if (logPlaceholder) {
                logPlaceholder.remove();
                logPlaceholder = null;
            }
            const p = document.createElement('p');
            const colorClasses = { info: 'text-gray-400', success: 'text-green-400', error: 'text-red-400', warn: 'text-yellow-400' };
            p.className = `${colorClasses[type]} mb-1`;
            p.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;
            logContainer.prepend(p);
        }
        
        function addResult(url, region) {
            if (resultsPlaceholder) {
                resultsPlaceholder.remove();
                resultsPlaceholder = null;
            }
            const div = document.createElement('div');
            div.className = 'found-item bg-gray-900/50 p-2 rounded-lg flex flex-col gap-2';
            div.innerHTML = `
                <img src="${url}" class="w-full h-auto object-contain rounded-md aspect-square" title="${url.split('/').pop()}">
                <span class="text-xs text-center font-semibold text-indigo-400">Found on amazon.${region}</span>
            `;
            resultsContainer.prepend(div);
        }

        // --- Core Scraping Logic ---
        async function fetchWithRetry(url, options, maxRetries = 3) {
            for (let attempt = 0; attempt < maxRetries; attempt++) {
                if (!isScanRunning) return null;
                const response = await fetch(url, options);
                if (response.status === 429) {
                    const delay = Math.pow(2, attempt) * 1000;
                    logActivity(`Rate limited (429). Retrying in ${delay / 1000}s...`, 'warn');
                    await new Promise(resolve => setTimeout(resolve, delay));
                    continue;
                }
                return response;
            }
            throw new Error(`Failed after ${maxRetries} attempts due to rate limiting.`);
        }

        function parseAsins(text) {
            const asinRegex = /B0[A-Z0-9]{8}/g;
            const matches = text.match(asinRegex);
            return matches ? [...new Set(matches)] : []; // Return unique ASINs
        }

        async function startScrape() {
            const asinsToScan = parseAsins(asinInput.value);
            if (asinsToScan.length === 0) {
                logActivity("No valid ASINs found in the input text.", 'error');
                return;
            }

            setScanningUIState(true);
            logActivity(`--- Found ${asinsToScan.length} ASINs. Starting batch scrape... ---`);
            let totalFound = 0;
            const allAsinsString = asinsToScan.join(',');

            for (const region of amazonRegions) {
                if (!isScanRunning) {
                    logActivity("Scrape stopped by user.", 'warn');
                    break;
                }
                try {
                    const targetUrl = `https://www.amazon.${region}/stores/page/preview?isSlp=1&isPreview=1&asins=${allAsinsString}`;
                    logActivity(`Fetching batch from: amazon.${region}`);
                    const proxyUrl = `https://corsproxy.io/?${encodeURIComponent(targetUrl)}`;
                    
                    const response = await fetchWithRetry(proxyUrl, {
                        headers: { 'x-cors-api-key': 'c3554ca1' }
                    });

                    if (!response) break;

                    if (!response.ok) {
                        throw new Error(`Status: ${response.status}`);
                    }

                    const html = await response.text();
                    logActivity(`Parsing page from amazon.${region}...`);
                    
                    const regex = /(https:\/\/m\.media-amazon\.com\/images\/I\/[a-zA-Z0-9\._-]+\.jpg)/g;
                    let match;
                    const foundUrlsOnPage = new Set();
                    
                    while ((match = regex.exec(html)) !== null) {
                        const url = match[1];
                        const highResUrl = url.replace(/\._[A-Z0-9_]+_\.jpg$/, '.jpg');
                        const filename = highResUrl.split('/').pop();
                        
                        if (!foundImageFilenames.has(filename)) {
                            foundImageFilenames.add(filename);
                            foundUrlsOnPage.add({url: highResUrl, region: region});
                        } else {
                            logActivity(`Duplicate image found on amazon.${region}: ${filename}`, 'info');
                        }
                    }

                    if (foundUrlsOnPage.size > 0) {
                        logActivity(`Found ${foundUrlsOnPage.size} new images on amazon.${region}.`, 'success');
                        foundUrlsOnPage.forEach(item => addResult(item.url, item.region));
                        totalFound += foundUrlsOnPage.size;
                    } else {
                        logActivity(`No new images found on amazon.${region}.`, 'info');
                    }

                } catch (error) {
                    logActivity(`Could not fetch or parse amazon.${region}: ${error.message}`, 'error');
                }
                 await new Promise(resolve => setTimeout(resolve, 750));
            }
            
            if (isScanRunning) {
                 logActivity(`--- Scrape Complete. Found ${totalFound} total new images. ---`);
            }
            setScanningUIState(false);
        }

        // --- Event Listeners ---
        startScanBtn.addEventListener('click', startScrape);
        stopScanBtn.addEventListener('click', () => {
            isScanRunning = false;
            logActivity("Stopping scan...", 'warn');
        });
        clearResultsBtn.addEventListener('click', () => {
            if (isScanRunning) return;
            resultsContainer.innerHTML = '<div id="resultsPlaceholder" class="col-span-full text-gray-500 text-center py-16">Found images will appear here...</div>';
            resultsPlaceholder = document.getElementById('resultsPlaceholder');
            foundImageFilenames.clear();
            logActivity('Results cleared.');
        });
    </script>
</body>
</html>
